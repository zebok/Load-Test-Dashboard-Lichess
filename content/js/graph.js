/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 677.0, "minX": 0.0, "maxY": 2685.0, "series": [{"data": [[0.0, 686.0], [0.1, 686.0], [0.2, 686.0], [0.3, 686.0], [0.4, 686.0], [0.5, 686.0], [0.6, 686.0], [0.7, 686.0], [0.8, 686.0], [0.9, 686.0], [1.0, 686.0], [1.1, 686.0], [1.2, 686.0], [1.3, 686.0], [1.4, 686.0], [1.5, 687.0], [1.6, 687.0], [1.7, 687.0], [1.8, 687.0], [1.9, 687.0], [2.0, 688.0], [2.1, 688.0], [2.2, 688.0], [2.3, 688.0], [2.4, 688.0], [2.5, 688.0], [2.6, 688.0], [2.7, 688.0], [2.8, 688.0], [2.9, 688.0], [3.0, 688.0], [3.1, 688.0], [3.2, 688.0], [3.3, 688.0], [3.4, 688.0], [3.5, 689.0], [3.6, 689.0], [3.7, 689.0], [3.8, 689.0], [3.9, 689.0], [4.0, 689.0], [4.1, 689.0], [4.2, 689.0], [4.3, 689.0], [4.4, 689.0], [4.5, 689.0], [4.6, 689.0], [4.7, 689.0], [4.8, 689.0], [4.9, 689.0], [5.0, 690.0], [5.1, 690.0], [5.2, 690.0], [5.3, 690.0], [5.4, 690.0], [5.5, 691.0], [5.6, 691.0], [5.7, 691.0], [5.8, 691.0], [5.9, 691.0], [6.0, 691.0], [6.1, 691.0], [6.2, 691.0], [6.3, 691.0], [6.4, 691.0], [6.5, 691.0], [6.6, 691.0], [6.7, 691.0], [6.8, 691.0], [6.9, 691.0], [7.0, 692.0], [7.1, 692.0], [7.2, 692.0], [7.3, 692.0], [7.4, 692.0], [7.5, 692.0], [7.6, 692.0], [7.7, 692.0], [7.8, 692.0], [7.9, 692.0], [8.0, 693.0], [8.1, 693.0], [8.2, 693.0], [8.3, 693.0], [8.4, 693.0], [8.5, 693.0], [8.6, 693.0], [8.7, 693.0], [8.8, 693.0], [8.9, 693.0], [9.0, 693.0], [9.1, 693.0], [9.2, 693.0], [9.3, 693.0], [9.4, 693.0], [9.5, 694.0], [9.6, 694.0], [9.7, 694.0], [9.8, 694.0], [9.9, 694.0], [10.0, 694.0], [10.1, 694.0], [10.2, 694.0], [10.3, 694.0], [10.4, 694.0], [10.5, 694.0], [10.6, 694.0], [10.7, 694.0], [10.8, 694.0], [10.9, 694.0], [11.0, 695.0], [11.1, 695.0], [11.2, 695.0], [11.3, 695.0], [11.4, 695.0], [11.5, 695.0], [11.6, 695.0], [11.7, 695.0], [11.8, 695.0], [11.9, 695.0], [12.0, 695.0], [12.1, 695.0], [12.2, 695.0], [12.3, 695.0], [12.4, 695.0], [12.5, 696.0], [12.6, 696.0], [12.7, 696.0], [12.8, 696.0], [12.9, 696.0], [13.0, 696.0], [13.1, 696.0], [13.2, 696.0], [13.3, 696.0], [13.4, 696.0], [13.5, 696.0], [13.6, 696.0], [13.7, 696.0], [13.8, 696.0], [13.9, 696.0], [14.0, 696.0], [14.1, 696.0], [14.2, 696.0], [14.3, 696.0], [14.4, 696.0], [14.5, 696.0], [14.6, 696.0], [14.7, 696.0], [14.8, 696.0], [14.9, 696.0], [15.0, 696.0], [15.1, 696.0], [15.2, 696.0], [15.3, 696.0], [15.4, 696.0], [15.5, 697.0], [15.6, 697.0], [15.7, 697.0], [15.8, 697.0], [15.9, 697.0], [16.0, 697.0], [16.1, 697.0], [16.2, 697.0], [16.3, 697.0], [16.4, 697.0], [16.5, 697.0], [16.6, 697.0], [16.7, 697.0], [16.8, 697.0], [16.9, 697.0], [17.0, 697.0], [17.1, 697.0], [17.2, 697.0], [17.3, 697.0], [17.4, 697.0], [17.5, 697.0], [17.6, 697.0], [17.7, 697.0], [17.8, 697.0], [17.9, 697.0], [18.0, 698.0], [18.1, 698.0], [18.2, 698.0], [18.3, 698.0], [18.4, 698.0], [18.5, 698.0], [18.6, 698.0], [18.7, 698.0], [18.8, 698.0], [18.9, 698.0], [19.0, 698.0], [19.1, 698.0], [19.2, 698.0], [19.3, 698.0], [19.4, 698.0], [19.5, 698.0], [19.6, 698.0], [19.7, 698.0], [19.8, 698.0], [19.9, 698.0], [20.0, 698.0], [20.1, 698.0], [20.2, 698.0], [20.3, 698.0], [20.4, 698.0], [20.5, 698.0], [20.6, 698.0], [20.7, 698.0], [20.8, 698.0], [20.9, 698.0], [21.0, 699.0], [21.1, 699.0], [21.2, 699.0], [21.3, 699.0], [21.4, 699.0], [21.5, 699.0], [21.6, 699.0], [21.7, 699.0], [21.8, 699.0], [21.9, 699.0], [22.0, 700.0], [22.1, 700.0], [22.2, 700.0], [22.3, 700.0], [22.4, 700.0], [22.5, 700.0], [22.6, 700.0], [22.7, 700.0], [22.8, 700.0], [22.9, 700.0], [23.0, 700.0], [23.1, 700.0], [23.2, 700.0], [23.3, 700.0], [23.4, 700.0], [23.5, 700.0], [23.6, 700.0], [23.7, 700.0], [23.8, 700.0], [23.9, 700.0], [24.0, 701.0], [24.1, 701.0], [24.2, 701.0], [24.3, 701.0], [24.4, 701.0], [24.5, 702.0], [24.6, 702.0], [24.7, 702.0], [24.8, 702.0], [24.9, 702.0], [25.0, 703.0], [25.1, 703.0], [25.2, 703.0], [25.3, 703.0], [25.4, 703.0], [25.5, 703.0], [25.6, 703.0], [25.7, 703.0], [25.8, 703.0], [25.9, 703.0], [26.0, 704.0], [26.1, 704.0], [26.2, 704.0], [26.3, 704.0], [26.4, 704.0], [26.5, 704.0], [26.6, 704.0], [26.7, 704.0], [26.8, 704.0], [26.9, 704.0], [27.0, 704.0], [27.1, 704.0], [27.2, 704.0], [27.3, 704.0], [27.4, 704.0], [27.5, 704.0], [27.6, 704.0], [27.7, 704.0], [27.8, 704.0], [27.9, 704.0], [28.0, 704.0], [28.1, 704.0], [28.2, 704.0], [28.3, 704.0], [28.4, 704.0], [28.5, 704.0], [28.6, 704.0], [28.7, 704.0], [28.8, 704.0], [28.9, 704.0], [29.0, 704.0], [29.1, 704.0], [29.2, 704.0], [29.3, 704.0], [29.4, 704.0], [29.5, 705.0], [29.6, 705.0], [29.7, 705.0], [29.8, 705.0], [29.9, 705.0], [30.0, 705.0], [30.1, 705.0], [30.2, 705.0], [30.3, 705.0], [30.4, 705.0], [30.5, 705.0], [30.6, 705.0], [30.7, 705.0], [30.8, 705.0], [30.9, 705.0], [31.0, 705.0], [31.1, 705.0], [31.2, 705.0], [31.3, 705.0], [31.4, 705.0], [31.5, 705.0], [31.6, 705.0], [31.7, 705.0], [31.8, 705.0], [31.9, 705.0], [32.0, 705.0], [32.1, 705.0], [32.2, 705.0], [32.3, 705.0], [32.4, 705.0], [32.5, 706.0], [32.6, 706.0], [32.7, 706.0], [32.8, 706.0], [32.9, 706.0], [33.0, 706.0], [33.1, 706.0], [33.2, 706.0], [33.3, 706.0], [33.4, 706.0], [33.5, 707.0], [33.6, 707.0], [33.7, 707.0], [33.8, 707.0], [33.9, 707.0], [34.0, 707.0], [34.1, 707.0], [34.2, 707.0], [34.3, 707.0], [34.4, 707.0], [34.5, 707.0], [34.6, 707.0], [34.7, 707.0], [34.8, 707.0], [34.9, 707.0], [35.0, 707.0], [35.1, 707.0], [35.2, 707.0], [35.3, 707.0], [35.4, 707.0], [35.5, 707.0], [35.6, 707.0], [35.7, 707.0], [35.8, 707.0], [35.9, 707.0], [36.0, 707.0], [36.1, 707.0], [36.2, 707.0], [36.3, 707.0], [36.4, 707.0], [36.5, 707.0], [36.6, 707.0], [36.7, 707.0], [36.8, 707.0], [36.9, 707.0], [37.0, 707.0], [37.1, 707.0], [37.2, 707.0], [37.3, 707.0], [37.4, 707.0], [37.5, 707.0], [37.6, 707.0], [37.7, 707.0], [37.8, 707.0], [37.9, 707.0], [38.0, 708.0], [38.1, 708.0], [38.2, 708.0], [38.3, 708.0], [38.4, 708.0], [38.5, 708.0], [38.6, 708.0], [38.7, 708.0], [38.8, 708.0], [38.9, 708.0], [39.0, 708.0], [39.1, 708.0], [39.2, 708.0], [39.3, 708.0], [39.4, 708.0], [39.5, 708.0], [39.6, 708.0], [39.7, 708.0], [39.8, 708.0], [39.9, 708.0], [40.0, 708.0], [40.1, 708.0], [40.2, 708.0], [40.3, 708.0], [40.4, 708.0], [40.5, 709.0], [40.6, 709.0], [40.7, 709.0], [40.8, 709.0], [40.9, 709.0], [41.0, 709.0], [41.1, 709.0], [41.2, 709.0], [41.3, 709.0], [41.4, 709.0], [41.5, 709.0], [41.6, 709.0], [41.7, 709.0], [41.8, 709.0], [41.9, 709.0], [42.0, 709.0], [42.1, 709.0], [42.2, 709.0], [42.3, 709.0], [42.4, 709.0], [42.5, 710.0], [42.6, 710.0], [42.7, 710.0], [42.8, 710.0], [42.9, 710.0], [43.0, 710.0], [43.1, 710.0], [43.2, 710.0], [43.3, 710.0], [43.4, 710.0], [43.5, 711.0], [43.6, 711.0], [43.7, 711.0], [43.8, 711.0], [43.9, 711.0], [44.0, 712.0], [44.1, 712.0], [44.2, 712.0], [44.3, 712.0], [44.4, 712.0], [44.5, 712.0], [44.6, 712.0], [44.7, 712.0], [44.8, 712.0], [44.9, 712.0], [45.0, 712.0], [45.1, 712.0], [45.2, 712.0], [45.3, 712.0], [45.4, 712.0], [45.5, 712.0], [45.6, 712.0], [45.7, 712.0], [45.8, 712.0], [45.9, 712.0], [46.0, 713.0], [46.1, 713.0], [46.2, 713.0], [46.3, 713.0], [46.4, 713.0], [46.5, 713.0], [46.6, 713.0], [46.7, 713.0], [46.8, 713.0], [46.9, 713.0], [47.0, 713.0], [47.1, 713.0], [47.2, 713.0], [47.3, 713.0], [47.4, 713.0], [47.5, 714.0], [47.6, 714.0], [47.7, 714.0], [47.8, 714.0], [47.9, 714.0], [48.0, 714.0], [48.1, 714.0], [48.2, 714.0], [48.3, 714.0], [48.4, 714.0], [48.5, 714.0], [48.6, 714.0], [48.7, 714.0], [48.8, 714.0], [48.9, 714.0], [49.0, 714.0], [49.1, 714.0], [49.2, 714.0], [49.3, 714.0], [49.4, 714.0], [49.5, 714.0], [49.6, 714.0], [49.7, 714.0], [49.8, 714.0], [49.9, 714.0], [50.0, 715.0], [50.1, 715.0], [50.2, 715.0], [50.3, 715.0], [50.4, 715.0], [50.5, 715.0], [50.6, 715.0], [50.7, 715.0], [50.8, 715.0], [50.9, 715.0], [51.0, 715.0], [51.1, 715.0], [51.2, 715.0], [51.3, 715.0], [51.4, 715.0], [51.5, 716.0], [51.6, 716.0], [51.7, 716.0], [51.8, 716.0], [51.9, 716.0], [52.0, 716.0], [52.1, 716.0], [52.2, 716.0], [52.3, 716.0], [52.4, 716.0], [52.5, 716.0], [52.6, 716.0], [52.7, 716.0], [52.8, 716.0], [52.9, 716.0], [53.0, 716.0], [53.1, 716.0], [53.2, 716.0], [53.3, 716.0], [53.4, 716.0], [53.5, 717.0], [53.6, 717.0], [53.7, 717.0], [53.8, 717.0], [53.9, 717.0], [54.0, 718.0], [54.1, 718.0], [54.2, 718.0], [54.3, 718.0], [54.4, 718.0], [54.5, 718.0], [54.6, 718.0], [54.7, 718.0], [54.8, 718.0], [54.9, 718.0], [55.0, 719.0], [55.1, 719.0], [55.2, 719.0], [55.3, 719.0], [55.4, 719.0], [55.5, 720.0], [55.6, 720.0], [55.7, 720.0], [55.8, 720.0], [55.9, 720.0], [56.0, 722.0], [56.1, 722.0], [56.2, 722.0], [56.3, 722.0], [56.4, 722.0], [56.5, 722.0], [56.6, 722.0], [56.7, 722.0], [56.8, 722.0], [56.9, 722.0], [57.0, 724.0], [57.1, 724.0], [57.2, 724.0], [57.3, 724.0], [57.4, 724.0], [57.5, 726.0], [57.6, 726.0], [57.7, 726.0], [57.8, 726.0], [57.9, 726.0], [58.0, 726.0], [58.1, 726.0], [58.2, 726.0], [58.3, 726.0], [58.4, 726.0], [58.5, 728.0], [58.6, 728.0], [58.7, 728.0], [58.8, 728.0], [58.9, 728.0], [59.0, 728.0], [59.1, 728.0], [59.2, 728.0], [59.3, 728.0], [59.4, 728.0], [59.5, 728.0], [59.6, 728.0], [59.7, 728.0], [59.8, 728.0], [59.9, 728.0], [60.0, 729.0], [60.1, 729.0], [60.2, 729.0], [60.3, 729.0], [60.4, 729.0], [60.5, 729.0], [60.6, 729.0], [60.7, 729.0], [60.8, 729.0], [60.9, 729.0], [61.0, 729.0], [61.1, 729.0], [61.2, 729.0], [61.3, 729.0], [61.4, 729.0], [61.5, 735.0], [61.6, 735.0], [61.7, 735.0], [61.8, 735.0], [61.9, 735.0], [62.0, 736.0], [62.1, 736.0], [62.2, 736.0], [62.3, 736.0], [62.4, 736.0], [62.5, 739.0], [62.6, 739.0], [62.7, 739.0], [62.8, 739.0], [62.9, 739.0], [63.0, 740.0], [63.1, 740.0], [63.2, 740.0], [63.3, 740.0], [63.4, 740.0], [63.5, 740.0], [63.6, 740.0], [63.7, 740.0], [63.8, 740.0], [63.9, 740.0], [64.0, 741.0], [64.1, 741.0], [64.2, 741.0], [64.3, 741.0], [64.4, 741.0], [64.5, 745.0], [64.6, 745.0], [64.7, 745.0], [64.8, 745.0], [64.9, 745.0], [65.0, 746.0], [65.1, 746.0], [65.2, 746.0], [65.3, 746.0], [65.4, 746.0], [65.5, 748.0], [65.6, 748.0], [65.7, 748.0], [65.8, 748.0], [65.9, 748.0], [66.0, 751.0], [66.1, 751.0], [66.2, 751.0], [66.3, 751.0], [66.4, 751.0], [66.5, 751.0], [66.6, 751.0], [66.7, 751.0], [66.8, 751.0], [66.9, 751.0], [67.0, 752.0], [67.1, 752.0], [67.2, 752.0], [67.3, 752.0], [67.4, 752.0], [67.5, 752.0], [67.6, 752.0], [67.7, 752.0], [67.8, 752.0], [67.9, 752.0], [68.0, 753.0], [68.1, 753.0], [68.2, 753.0], [68.3, 753.0], [68.4, 753.0], [68.5, 755.0], [68.6, 755.0], [68.7, 755.0], [68.8, 755.0], [68.9, 755.0], [69.0, 755.0], [69.1, 755.0], [69.2, 755.0], [69.3, 755.0], [69.4, 755.0], [69.5, 756.0], [69.6, 756.0], [69.7, 756.0], [69.8, 756.0], [69.9, 756.0], [70.0, 756.0], [70.1, 756.0], [70.2, 756.0], [70.3, 756.0], [70.4, 756.0], [70.5, 763.0], [70.6, 763.0], [70.7, 763.0], [70.8, 763.0], [70.9, 763.0], [71.0, 764.0], [71.1, 764.0], [71.2, 764.0], [71.3, 764.0], [71.4, 764.0], [71.5, 767.0], [71.6, 767.0], [71.7, 767.0], [71.8, 767.0], [71.9, 767.0], [72.0, 768.0], [72.1, 768.0], [72.2, 768.0], [72.3, 768.0], [72.4, 768.0], [72.5, 774.0], [72.6, 774.0], [72.7, 774.0], [72.8, 774.0], [72.9, 774.0], [73.0, 775.0], [73.1, 775.0], [73.2, 775.0], [73.3, 775.0], [73.4, 775.0], [73.5, 776.0], [73.6, 776.0], [73.7, 776.0], [73.8, 776.0], [73.9, 776.0], [74.0, 783.0], [74.1, 783.0], [74.2, 783.0], [74.3, 783.0], [74.4, 783.0], [74.5, 784.0], [74.6, 784.0], [74.7, 784.0], [74.8, 784.0], [74.9, 784.0], [75.0, 785.0], [75.1, 785.0], [75.2, 785.0], [75.3, 785.0], [75.4, 785.0], [75.5, 789.0], [75.6, 789.0], [75.7, 789.0], [75.8, 789.0], [75.9, 789.0], [76.0, 792.0], [76.1, 792.0], [76.2, 792.0], [76.3, 792.0], [76.4, 792.0], [76.5, 792.0], [76.6, 792.0], [76.7, 792.0], [76.8, 792.0], [76.9, 792.0], [77.0, 795.0], [77.1, 795.0], [77.2, 795.0], [77.3, 795.0], [77.4, 795.0], [77.5, 796.0], [77.6, 796.0], [77.7, 796.0], [77.8, 796.0], [77.9, 796.0], [78.0, 796.0], [78.1, 796.0], [78.2, 796.0], [78.3, 796.0], [78.4, 796.0], [78.5, 798.0], [78.6, 798.0], [78.7, 798.0], [78.8, 798.0], [78.9, 798.0], [79.0, 813.0], [79.1, 813.0], [79.2, 813.0], [79.3, 813.0], [79.4, 813.0], [79.5, 914.0], [79.6, 914.0], [79.7, 914.0], [79.8, 914.0], [79.9, 914.0], [80.0, 915.0], [80.1, 915.0], [80.2, 915.0], [80.3, 915.0], [80.4, 915.0], [80.5, 916.0], [80.6, 916.0], [80.7, 916.0], [80.8, 916.0], [80.9, 916.0], [81.0, 918.0], [81.1, 918.0], [81.2, 918.0], [81.3, 918.0], [81.4, 918.0], [81.5, 919.0], [81.6, 919.0], [81.7, 919.0], [81.8, 919.0], [81.9, 919.0], [82.0, 921.0], [82.1, 921.0], [82.2, 921.0], [82.3, 921.0], [82.4, 921.0], [82.5, 921.0], [82.6, 921.0], [82.7, 921.0], [82.8, 921.0], [82.9, 921.0], [83.0, 922.0], [83.1, 922.0], [83.2, 922.0], [83.3, 922.0], [83.4, 922.0], [83.5, 922.0], [83.6, 922.0], [83.7, 922.0], [83.8, 922.0], [83.9, 922.0], [84.0, 926.0], [84.1, 926.0], [84.2, 926.0], [84.3, 926.0], [84.4, 926.0], [84.5, 926.0], [84.6, 926.0], [84.7, 926.0], [84.8, 926.0], [84.9, 926.0], [85.0, 926.0], [85.1, 926.0], [85.2, 926.0], [85.3, 926.0], [85.4, 926.0], [85.5, 927.0], [85.6, 927.0], [85.7, 927.0], [85.8, 927.0], [85.9, 927.0], [86.0, 928.0], [86.1, 928.0], [86.2, 928.0], [86.3, 928.0], [86.4, 928.0], [86.5, 931.0], [86.6, 931.0], [86.7, 931.0], [86.8, 931.0], [86.9, 931.0], [87.0, 932.0], [87.1, 932.0], [87.2, 932.0], [87.3, 932.0], [87.4, 932.0], [87.5, 933.0], [87.6, 933.0], [87.7, 933.0], [87.8, 933.0], [87.9, 933.0], [88.0, 934.0], [88.1, 934.0], [88.2, 934.0], [88.3, 934.0], [88.4, 934.0], [88.5, 934.0], [88.6, 934.0], [88.7, 934.0], [88.8, 934.0], [88.9, 934.0], [89.0, 935.0], [89.1, 935.0], [89.2, 935.0], [89.3, 935.0], [89.4, 935.0], [89.5, 936.0], [89.6, 936.0], [89.7, 936.0], [89.8, 936.0], [89.9, 936.0], [90.0, 940.0], [90.1, 940.0], [90.2, 940.0], [90.3, 940.0], [90.4, 940.0], [90.5, 941.0], [90.6, 941.0], [90.7, 941.0], [90.8, 941.0], [90.9, 941.0], [91.0, 944.0], [91.1, 944.0], [91.2, 944.0], [91.3, 944.0], [91.4, 944.0], [91.5, 944.0], [91.6, 944.0], [91.7, 944.0], [91.8, 944.0], [91.9, 944.0], [92.0, 945.0], [92.1, 945.0], [92.2, 945.0], [92.3, 945.0], [92.4, 945.0], [92.5, 948.0], [92.6, 948.0], [92.7, 948.0], [92.8, 948.0], [92.9, 948.0], [93.0, 948.0], [93.1, 948.0], [93.2, 948.0], [93.3, 948.0], [93.4, 948.0], [93.5, 950.0], [93.6, 950.0], [93.7, 950.0], [93.8, 950.0], [93.9, 950.0], [94.0, 954.0], [94.1, 954.0], [94.2, 954.0], [94.3, 954.0], [94.4, 954.0], [94.5, 972.0], [94.6, 972.0], [94.7, 972.0], [94.8, 972.0], [94.9, 972.0], [95.0, 981.0], [95.1, 981.0], [95.2, 981.0], [95.3, 981.0], [95.4, 981.0], [95.5, 989.0], [95.6, 989.0], [95.7, 989.0], [95.8, 989.0], [95.9, 989.0], [96.0, 1018.0], [96.1, 1018.0], [96.2, 1018.0], [96.3, 1018.0], [96.4, 1018.0], [96.5, 1029.0], [96.6, 1029.0], [96.7, 1029.0], [96.8, 1029.0], [96.9, 1029.0], [97.0, 1246.0], [97.1, 1246.0], [97.2, 1246.0], [97.3, 1246.0], [97.4, 1246.0], [97.5, 1252.0], [97.6, 1252.0], [97.7, 1252.0], [97.8, 1252.0], [97.9, 1252.0], [98.0, 1281.0], [98.1, 1281.0], [98.2, 1281.0], [98.3, 1281.0], [98.4, 1281.0], [98.5, 1281.0], [98.6, 1281.0], [98.7, 1281.0], [98.8, 1281.0], [98.9, 1281.0], [99.0, 1947.0], [99.1, 1947.0], [99.2, 1947.0], [99.3, 1947.0], [99.4, 1947.0], [99.5, 1960.0], [99.6, 1960.0], [99.7, 1960.0], [99.8, 1960.0], [99.9, 1960.0]], "isOverall": false, "label": "HTTP Request Lichess main page-1", "isController": false}, {"data": [[0.0, 1373.0], [0.1, 1373.0], [0.2, 1373.0], [0.3, 1373.0], [0.4, 1373.0], [0.5, 1380.0], [0.6, 1380.0], [0.7, 1380.0], [0.8, 1380.0], [0.9, 1380.0], [1.0, 1381.0], [1.1, 1381.0], [1.2, 1381.0], [1.3, 1381.0], [1.4, 1381.0], [1.5, 1382.0], [1.6, 1382.0], [1.7, 1382.0], [1.8, 1382.0], [1.9, 1382.0], [2.0, 1384.0], [2.1, 1384.0], [2.2, 1384.0], [2.3, 1384.0], [2.4, 1384.0], [2.5, 1384.0], [2.6, 1384.0], [2.7, 1384.0], [2.8, 1384.0], [2.9, 1384.0], [3.0, 1384.0], [3.1, 1384.0], [3.2, 1384.0], [3.3, 1384.0], [3.4, 1384.0], [3.5, 1384.0], [3.6, 1384.0], [3.7, 1384.0], [3.8, 1384.0], [3.9, 1384.0], [4.0, 1384.0], [4.1, 1384.0], [4.2, 1384.0], [4.3, 1384.0], [4.4, 1384.0], [4.5, 1387.0], [4.6, 1387.0], [4.7, 1387.0], [4.8, 1387.0], [4.9, 1387.0], [5.0, 1388.0], [5.1, 1388.0], [5.2, 1388.0], [5.3, 1388.0], [5.4, 1388.0], [5.5, 1389.0], [5.6, 1389.0], [5.7, 1389.0], [5.8, 1389.0], [5.9, 1389.0], [6.0, 1390.0], [6.1, 1390.0], [6.2, 1390.0], [6.3, 1390.0], [6.4, 1390.0], [6.5, 1391.0], [6.6, 1391.0], [6.7, 1391.0], [6.8, 1391.0], [6.9, 1391.0], [7.0, 1391.0], [7.1, 1391.0], [7.2, 1391.0], [7.3, 1391.0], [7.4, 1391.0], [7.5, 1391.0], [7.6, 1391.0], [7.7, 1391.0], [7.8, 1391.0], [7.9, 1391.0], [8.0, 1392.0], [8.1, 1392.0], [8.2, 1392.0], [8.3, 1392.0], [8.4, 1392.0], [8.5, 1393.0], [8.6, 1393.0], [8.7, 1393.0], [8.8, 1393.0], [8.9, 1393.0], [9.0, 1394.0], [9.1, 1394.0], [9.2, 1394.0], [9.3, 1394.0], [9.4, 1394.0], [9.5, 1394.0], [9.6, 1394.0], [9.7, 1394.0], [9.8, 1394.0], [9.9, 1394.0], [10.0, 1395.0], [10.1, 1395.0], [10.2, 1395.0], [10.3, 1395.0], [10.4, 1395.0], [10.5, 1395.0], [10.6, 1395.0], [10.7, 1395.0], [10.8, 1395.0], [10.9, 1395.0], [11.0, 1395.0], [11.1, 1395.0], [11.2, 1395.0], [11.3, 1395.0], [11.4, 1395.0], [11.5, 1396.0], [11.6, 1396.0], [11.7, 1396.0], [11.8, 1396.0], [11.9, 1396.0], [12.0, 1396.0], [12.1, 1396.0], [12.2, 1396.0], [12.3, 1396.0], [12.4, 1396.0], [12.5, 1396.0], [12.6, 1396.0], [12.7, 1396.0], [12.8, 1396.0], [12.9, 1396.0], [13.0, 1397.0], [13.1, 1397.0], [13.2, 1397.0], [13.3, 1397.0], [13.4, 1397.0], [13.5, 1398.0], [13.6, 1398.0], [13.7, 1398.0], [13.8, 1398.0], [13.9, 1398.0], [14.0, 1399.0], [14.1, 1399.0], [14.2, 1399.0], [14.3, 1399.0], [14.4, 1399.0], [14.5, 1400.0], [14.6, 1400.0], [14.7, 1400.0], [14.8, 1400.0], [14.9, 1400.0], [15.0, 1402.0], [15.1, 1402.0], [15.2, 1402.0], [15.3, 1402.0], [15.4, 1402.0], [15.5, 1402.0], [15.6, 1402.0], [15.7, 1402.0], [15.8, 1402.0], [15.9, 1402.0], [16.0, 1402.0], [16.1, 1402.0], [16.2, 1402.0], [16.3, 1402.0], [16.4, 1402.0], [16.5, 1402.0], [16.6, 1402.0], [16.7, 1402.0], [16.8, 1402.0], [16.9, 1402.0], [17.0, 1402.0], [17.1, 1402.0], [17.2, 1402.0], [17.3, 1402.0], [17.4, 1402.0], [17.5, 1403.0], [17.6, 1403.0], [17.7, 1403.0], [17.8, 1403.0], [17.9, 1403.0], [18.0, 1403.0], [18.1, 1403.0], [18.2, 1403.0], [18.3, 1403.0], [18.4, 1403.0], [18.5, 1403.0], [18.6, 1403.0], [18.7, 1403.0], [18.8, 1403.0], [18.9, 1403.0], [19.0, 1403.0], [19.1, 1403.0], [19.2, 1403.0], [19.3, 1403.0], [19.4, 1403.0], [19.5, 1404.0], [19.6, 1404.0], [19.7, 1404.0], [19.8, 1404.0], [19.9, 1404.0], [20.0, 1405.0], [20.1, 1405.0], [20.2, 1405.0], [20.3, 1405.0], [20.4, 1405.0], [20.5, 1405.0], [20.6, 1405.0], [20.7, 1405.0], [20.8, 1405.0], [20.9, 1405.0], [21.0, 1405.0], [21.1, 1405.0], [21.2, 1405.0], [21.3, 1405.0], [21.4, 1405.0], [21.5, 1406.0], [21.6, 1406.0], [21.7, 1406.0], [21.8, 1406.0], [21.9, 1406.0], [22.0, 1407.0], [22.1, 1407.0], [22.2, 1407.0], [22.3, 1407.0], [22.4, 1407.0], [22.5, 1408.0], [22.6, 1408.0], [22.7, 1408.0], [22.8, 1408.0], [22.9, 1408.0], [23.0, 1408.0], [23.1, 1408.0], [23.2, 1408.0], [23.3, 1408.0], [23.4, 1408.0], [23.5, 1409.0], [23.6, 1409.0], [23.7, 1409.0], [23.8, 1409.0], [23.9, 1409.0], [24.0, 1409.0], [24.1, 1409.0], [24.2, 1409.0], [24.3, 1409.0], [24.4, 1409.0], [24.5, 1410.0], [24.6, 1410.0], [24.7, 1410.0], [24.8, 1410.0], [24.9, 1410.0], [25.0, 1411.0], [25.1, 1411.0], [25.2, 1411.0], [25.3, 1411.0], [25.4, 1411.0], [25.5, 1413.0], [25.6, 1413.0], [25.7, 1413.0], [25.8, 1413.0], [25.9, 1413.0], [26.0, 1413.0], [26.1, 1413.0], [26.2, 1413.0], [26.3, 1413.0], [26.4, 1413.0], [26.5, 1414.0], [26.6, 1414.0], [26.7, 1414.0], [26.8, 1414.0], [26.9, 1414.0], [27.0, 1414.0], [27.1, 1414.0], [27.2, 1414.0], [27.3, 1414.0], [27.4, 1414.0], [27.5, 1414.0], [27.6, 1414.0], [27.7, 1414.0], [27.8, 1414.0], [27.9, 1414.0], [28.0, 1415.0], [28.1, 1415.0], [28.2, 1415.0], [28.3, 1415.0], [28.4, 1415.0], [28.5, 1415.0], [28.6, 1415.0], [28.7, 1415.0], [28.8, 1415.0], [28.9, 1415.0], [29.0, 1415.0], [29.1, 1415.0], [29.2, 1415.0], [29.3, 1415.0], [29.4, 1415.0], [29.5, 1415.0], [29.6, 1415.0], [29.7, 1415.0], [29.8, 1415.0], [29.9, 1415.0], [30.0, 1416.0], [30.1, 1416.0], [30.2, 1416.0], [30.3, 1416.0], [30.4, 1416.0], [30.5, 1416.0], [30.6, 1416.0], [30.7, 1416.0], [30.8, 1416.0], [30.9, 1416.0], [31.0, 1416.0], [31.1, 1416.0], [31.2, 1416.0], [31.3, 1416.0], [31.4, 1416.0], [31.5, 1417.0], [31.6, 1417.0], [31.7, 1417.0], [31.8, 1417.0], [31.9, 1417.0], [32.0, 1417.0], [32.1, 1417.0], [32.2, 1417.0], [32.3, 1417.0], [32.4, 1417.0], [32.5, 1419.0], [32.6, 1419.0], [32.7, 1419.0], [32.8, 1419.0], [32.9, 1419.0], [33.0, 1419.0], [33.1, 1419.0], [33.2, 1419.0], [33.3, 1419.0], [33.4, 1419.0], [33.5, 1420.0], [33.6, 1420.0], [33.7, 1420.0], [33.8, 1420.0], [33.9, 1420.0], [34.0, 1422.0], [34.1, 1422.0], [34.2, 1422.0], [34.3, 1422.0], [34.4, 1422.0], [34.5, 1424.0], [34.6, 1424.0], [34.7, 1424.0], [34.8, 1424.0], [34.9, 1424.0], [35.0, 1425.0], [35.1, 1425.0], [35.2, 1425.0], [35.3, 1425.0], [35.4, 1425.0], [35.5, 1425.0], [35.6, 1425.0], [35.7, 1425.0], [35.8, 1425.0], [35.9, 1425.0], [36.0, 1425.0], [36.1, 1425.0], [36.2, 1425.0], [36.3, 1425.0], [36.4, 1425.0], [36.5, 1426.0], [36.6, 1426.0], [36.7, 1426.0], [36.8, 1426.0], [36.9, 1426.0], [37.0, 1426.0], [37.1, 1426.0], [37.2, 1426.0], [37.3, 1426.0], [37.4, 1426.0], [37.5, 1429.0], [37.6, 1429.0], [37.7, 1429.0], [37.8, 1429.0], [37.9, 1429.0], [38.0, 1430.0], [38.1, 1430.0], [38.2, 1430.0], [38.3, 1430.0], [38.4, 1430.0], [38.5, 1430.0], [38.6, 1430.0], [38.7, 1430.0], [38.8, 1430.0], [38.9, 1430.0], [39.0, 1430.0], [39.1, 1430.0], [39.2, 1430.0], [39.3, 1430.0], [39.4, 1430.0], [39.5, 1432.0], [39.6, 1432.0], [39.7, 1432.0], [39.8, 1432.0], [39.9, 1432.0], [40.0, 1432.0], [40.1, 1432.0], [40.2, 1432.0], [40.3, 1432.0], [40.4, 1432.0], [40.5, 1432.0], [40.6, 1432.0], [40.7, 1432.0], [40.8, 1432.0], [40.9, 1432.0], [41.0, 1433.0], [41.1, 1433.0], [41.2, 1433.0], [41.3, 1433.0], [41.4, 1433.0], [41.5, 1434.0], [41.6, 1434.0], [41.7, 1434.0], [41.8, 1434.0], [41.9, 1434.0], [42.0, 1435.0], [42.1, 1435.0], [42.2, 1435.0], [42.3, 1435.0], [42.4, 1435.0], [42.5, 1436.0], [42.6, 1436.0], [42.7, 1436.0], [42.8, 1436.0], [42.9, 1436.0], [43.0, 1436.0], [43.1, 1436.0], [43.2, 1436.0], [43.3, 1436.0], [43.4, 1436.0], [43.5, 1438.0], [43.6, 1438.0], [43.7, 1438.0], [43.8, 1438.0], [43.9, 1438.0], [44.0, 1438.0], [44.1, 1438.0], [44.2, 1438.0], [44.3, 1438.0], [44.4, 1438.0], [44.5, 1440.0], [44.6, 1440.0], [44.7, 1440.0], [44.8, 1440.0], [44.9, 1440.0], [45.0, 1440.0], [45.1, 1440.0], [45.2, 1440.0], [45.3, 1440.0], [45.4, 1440.0], [45.5, 1441.0], [45.6, 1441.0], [45.7, 1441.0], [45.8, 1441.0], [45.9, 1441.0], [46.0, 1441.0], [46.1, 1441.0], [46.2, 1441.0], [46.3, 1441.0], [46.4, 1441.0], [46.5, 1441.0], [46.6, 1441.0], [46.7, 1441.0], [46.8, 1441.0], [46.9, 1441.0], [47.0, 1443.0], [47.1, 1443.0], [47.2, 1443.0], [47.3, 1443.0], [47.4, 1443.0], [47.5, 1444.0], [47.6, 1444.0], [47.7, 1444.0], [47.8, 1444.0], [47.9, 1444.0], [48.0, 1444.0], [48.1, 1444.0], [48.2, 1444.0], [48.3, 1444.0], [48.4, 1444.0], [48.5, 1445.0], [48.6, 1445.0], [48.7, 1445.0], [48.8, 1445.0], [48.9, 1445.0], [49.0, 1446.0], [49.1, 1446.0], [49.2, 1446.0], [49.3, 1446.0], [49.4, 1446.0], [49.5, 1446.0], [49.6, 1446.0], [49.7, 1446.0], [49.8, 1446.0], [49.9, 1446.0], [50.0, 1447.0], [50.1, 1447.0], [50.2, 1447.0], [50.3, 1447.0], [50.4, 1447.0], [50.5, 1447.0], [50.6, 1447.0], [50.7, 1447.0], [50.8, 1447.0], [50.9, 1447.0], [51.0, 1447.0], [51.1, 1447.0], [51.2, 1447.0], [51.3, 1447.0], [51.4, 1447.0], [51.5, 1448.0], [51.6, 1448.0], [51.7, 1448.0], [51.8, 1448.0], [51.9, 1448.0], [52.0, 1449.0], [52.1, 1449.0], [52.2, 1449.0], [52.3, 1449.0], [52.4, 1449.0], [52.5, 1450.0], [52.6, 1450.0], [52.7, 1450.0], [52.8, 1450.0], [52.9, 1450.0], [53.0, 1452.0], [53.1, 1452.0], [53.2, 1452.0], [53.3, 1452.0], [53.4, 1452.0], [53.5, 1454.0], [53.6, 1454.0], [53.7, 1454.0], [53.8, 1454.0], [53.9, 1454.0], [54.0, 1454.0], [54.1, 1454.0], [54.2, 1454.0], [54.3, 1454.0], [54.4, 1454.0], [54.5, 1455.0], [54.6, 1455.0], [54.7, 1455.0], [54.8, 1455.0], [54.9, 1455.0], [55.0, 1455.0], [55.1, 1455.0], [55.2, 1455.0], [55.3, 1455.0], [55.4, 1455.0], [55.5, 1455.0], [55.6, 1455.0], [55.7, 1455.0], [55.8, 1455.0], [55.9, 1455.0], [56.0, 1456.0], [56.1, 1456.0], [56.2, 1456.0], [56.3, 1456.0], [56.4, 1456.0], [56.5, 1457.0], [56.6, 1457.0], [56.7, 1457.0], [56.8, 1457.0], [56.9, 1457.0], [57.0, 1457.0], [57.1, 1457.0], [57.2, 1457.0], [57.3, 1457.0], [57.4, 1457.0], [57.5, 1458.0], [57.6, 1458.0], [57.7, 1458.0], [57.8, 1458.0], [57.9, 1458.0], [58.0, 1462.0], [58.1, 1462.0], [58.2, 1462.0], [58.3, 1462.0], [58.4, 1462.0], [58.5, 1462.0], [58.6, 1462.0], [58.7, 1462.0], [58.8, 1462.0], [58.9, 1462.0], [59.0, 1463.0], [59.1, 1463.0], [59.2, 1463.0], [59.3, 1463.0], [59.4, 1463.0], [59.5, 1463.0], [59.6, 1463.0], [59.7, 1463.0], [59.8, 1463.0], [59.9, 1463.0], [60.0, 1465.0], [60.1, 1465.0], [60.2, 1465.0], [60.3, 1465.0], [60.4, 1465.0], [60.5, 1469.0], [60.6, 1469.0], [60.7, 1469.0], [60.8, 1469.0], [60.9, 1469.0], [61.0, 1469.0], [61.1, 1469.0], [61.2, 1469.0], [61.3, 1469.0], [61.4, 1469.0], [61.5, 1471.0], [61.6, 1471.0], [61.7, 1471.0], [61.8, 1471.0], [61.9, 1471.0], [62.0, 1472.0], [62.1, 1472.0], [62.2, 1472.0], [62.3, 1472.0], [62.4, 1472.0], [62.5, 1474.0], [62.6, 1474.0], [62.7, 1474.0], [62.8, 1474.0], [62.9, 1474.0], [63.0, 1477.0], [63.1, 1477.0], [63.2, 1477.0], [63.3, 1477.0], [63.4, 1477.0], [63.5, 1478.0], [63.6, 1478.0], [63.7, 1478.0], [63.8, 1478.0], [63.9, 1478.0], [64.0, 1480.0], [64.1, 1480.0], [64.2, 1480.0], [64.3, 1480.0], [64.4, 1480.0], [64.5, 1482.0], [64.6, 1482.0], [64.7, 1482.0], [64.8, 1482.0], [64.9, 1482.0], [65.0, 1483.0], [65.1, 1483.0], [65.2, 1483.0], [65.3, 1483.0], [65.4, 1483.0], [65.5, 1483.0], [65.6, 1483.0], [65.7, 1483.0], [65.8, 1483.0], [65.9, 1483.0], [66.0, 1484.0], [66.1, 1484.0], [66.2, 1484.0], [66.3, 1484.0], [66.4, 1484.0], [66.5, 1484.0], [66.6, 1484.0], [66.7, 1484.0], [66.8, 1484.0], [66.9, 1484.0], [67.0, 1485.0], [67.1, 1485.0], [67.2, 1485.0], [67.3, 1485.0], [67.4, 1485.0], [67.5, 1485.0], [67.6, 1485.0], [67.7, 1485.0], [67.8, 1485.0], [67.9, 1485.0], [68.0, 1485.0], [68.1, 1485.0], [68.2, 1485.0], [68.3, 1485.0], [68.4, 1485.0], [68.5, 1489.0], [68.6, 1489.0], [68.7, 1489.0], [68.8, 1489.0], [68.9, 1489.0], [69.0, 1489.0], [69.1, 1489.0], [69.2, 1489.0], [69.3, 1489.0], [69.4, 1489.0], [69.5, 1489.0], [69.6, 1489.0], [69.7, 1489.0], [69.8, 1489.0], [69.9, 1489.0], [70.0, 1491.0], [70.1, 1491.0], [70.2, 1491.0], [70.3, 1491.0], [70.4, 1491.0], [70.5, 1491.0], [70.6, 1491.0], [70.7, 1491.0], [70.8, 1491.0], [70.9, 1491.0], [71.0, 1492.0], [71.1, 1492.0], [71.2, 1492.0], [71.3, 1492.0], [71.4, 1492.0], [71.5, 1492.0], [71.6, 1492.0], [71.7, 1492.0], [71.8, 1492.0], [71.9, 1492.0], [72.0, 1493.0], [72.1, 1493.0], [72.2, 1493.0], [72.3, 1493.0], [72.4, 1493.0], [72.5, 1494.0], [72.6, 1494.0], [72.7, 1494.0], [72.8, 1494.0], [72.9, 1494.0], [73.0, 1502.0], [73.1, 1502.0], [73.2, 1502.0], [73.3, 1502.0], [73.4, 1502.0], [73.5, 1508.0], [73.6, 1508.0], [73.7, 1508.0], [73.8, 1508.0], [73.9, 1508.0], [74.0, 1512.0], [74.1, 1512.0], [74.2, 1512.0], [74.3, 1512.0], [74.4, 1512.0], [74.5, 1521.0], [74.6, 1521.0], [74.7, 1521.0], [74.8, 1521.0], [74.9, 1521.0], [75.0, 1527.0], [75.1, 1527.0], [75.2, 1527.0], [75.3, 1527.0], [75.4, 1527.0], [75.5, 1553.0], [75.6, 1553.0], [75.7, 1553.0], [75.8, 1553.0], [75.9, 1553.0], [76.0, 1590.0], [76.1, 1590.0], [76.2, 1590.0], [76.3, 1590.0], [76.4, 1590.0], [76.5, 1595.0], [76.6, 1595.0], [76.7, 1595.0], [76.8, 1595.0], [76.9, 1595.0], [77.0, 1607.0], [77.1, 1607.0], [77.2, 1607.0], [77.3, 1607.0], [77.4, 1607.0], [77.5, 1609.0], [77.6, 1609.0], [77.7, 1609.0], [77.8, 1609.0], [77.9, 1609.0], [78.0, 1615.0], [78.1, 1615.0], [78.2, 1615.0], [78.3, 1615.0], [78.4, 1615.0], [78.5, 1615.0], [78.6, 1615.0], [78.7, 1615.0], [78.8, 1615.0], [78.9, 1615.0], [79.0, 1621.0], [79.1, 1621.0], [79.2, 1621.0], [79.3, 1621.0], [79.4, 1621.0], [79.5, 1626.0], [79.6, 1626.0], [79.7, 1626.0], [79.8, 1626.0], [79.9, 1626.0], [80.0, 1639.0], [80.1, 1639.0], [80.2, 1639.0], [80.3, 1639.0], [80.4, 1639.0], [80.5, 1641.0], [80.6, 1641.0], [80.7, 1641.0], [80.8, 1641.0], [80.9, 1641.0], [81.0, 1642.0], [81.1, 1642.0], [81.2, 1642.0], [81.3, 1642.0], [81.4, 1642.0], [81.5, 1643.0], [81.6, 1643.0], [81.7, 1643.0], [81.8, 1643.0], [81.9, 1643.0], [82.0, 1644.0], [82.1, 1644.0], [82.2, 1644.0], [82.3, 1644.0], [82.4, 1644.0], [82.5, 1646.0], [82.6, 1646.0], [82.7, 1646.0], [82.8, 1646.0], [82.9, 1646.0], [83.0, 1646.0], [83.1, 1646.0], [83.2, 1646.0], [83.3, 1646.0], [83.4, 1646.0], [83.5, 1647.0], [83.6, 1647.0], [83.7, 1647.0], [83.8, 1647.0], [83.9, 1647.0], [84.0, 1652.0], [84.1, 1652.0], [84.2, 1652.0], [84.3, 1652.0], [84.4, 1652.0], [84.5, 1655.0], [84.6, 1655.0], [84.7, 1655.0], [84.8, 1655.0], [84.9, 1655.0], [85.0, 1660.0], [85.1, 1660.0], [85.2, 1660.0], [85.3, 1660.0], [85.4, 1660.0], [85.5, 1660.0], [85.6, 1660.0], [85.7, 1660.0], [85.8, 1660.0], [85.9, 1660.0], [86.0, 1667.0], [86.1, 1667.0], [86.2, 1667.0], [86.3, 1667.0], [86.4, 1667.0], [86.5, 1668.0], [86.6, 1668.0], [86.7, 1668.0], [86.8, 1668.0], [86.9, 1668.0], [87.0, 1674.0], [87.1, 1674.0], [87.2, 1674.0], [87.3, 1674.0], [87.4, 1674.0], [87.5, 1674.0], [87.6, 1674.0], [87.7, 1674.0], [87.8, 1674.0], [87.9, 1674.0], [88.0, 1681.0], [88.1, 1681.0], [88.2, 1681.0], [88.3, 1681.0], [88.4, 1681.0], [88.5, 1681.0], [88.6, 1681.0], [88.7, 1681.0], [88.8, 1681.0], [88.9, 1681.0], [89.0, 1687.0], [89.1, 1687.0], [89.2, 1687.0], [89.3, 1687.0], [89.4, 1687.0], [89.5, 1687.0], [89.6, 1687.0], [89.7, 1687.0], [89.8, 1687.0], [89.9, 1687.0], [90.0, 1687.0], [90.1, 1687.0], [90.2, 1687.0], [90.3, 1687.0], [90.4, 1687.0], [90.5, 1690.0], [90.6, 1690.0], [90.7, 1690.0], [90.8, 1690.0], [90.9, 1690.0], [91.0, 1692.0], [91.1, 1692.0], [91.2, 1692.0], [91.3, 1692.0], [91.4, 1692.0], [91.5, 1700.0], [91.6, 1700.0], [91.7, 1700.0], [91.8, 1700.0], [91.9, 1700.0], [92.0, 1710.0], [92.1, 1710.0], [92.2, 1710.0], [92.3, 1710.0], [92.4, 1710.0], [92.5, 1712.0], [92.6, 1712.0], [92.7, 1712.0], [92.8, 1712.0], [92.9, 1712.0], [93.0, 1721.0], [93.1, 1721.0], [93.2, 1721.0], [93.3, 1721.0], [93.4, 1721.0], [93.5, 1744.0], [93.6, 1744.0], [93.7, 1744.0], [93.8, 1744.0], [93.9, 1744.0], [94.0, 1809.0], [94.1, 1809.0], [94.2, 1809.0], [94.3, 1809.0], [94.4, 1809.0], [94.5, 1943.0], [94.6, 1943.0], [94.7, 1943.0], [94.8, 1943.0], [94.9, 1943.0], [95.0, 1957.0], [95.1, 1957.0], [95.2, 1957.0], [95.3, 1957.0], [95.4, 1957.0], [95.5, 1980.0], [95.6, 1980.0], [95.7, 1980.0], [95.8, 1980.0], [95.9, 1980.0], [96.0, 1994.0], [96.1, 1994.0], [96.2, 1994.0], [96.3, 1994.0], [96.4, 1994.0], [96.5, 1998.0], [96.6, 1998.0], [96.7, 1998.0], [96.8, 1998.0], [96.9, 1998.0], [97.0, 2045.0], [97.1, 2045.0], [97.2, 2045.0], [97.3, 2045.0], [97.4, 2045.0], [97.5, 2452.0], [97.6, 2452.0], [97.7, 2452.0], [97.8, 2452.0], [97.9, 2452.0], [98.0, 2459.0], [98.1, 2459.0], [98.2, 2459.0], [98.3, 2459.0], [98.4, 2459.0], [98.5, 2657.0], [98.6, 2657.0], [98.7, 2657.0], [98.8, 2657.0], [98.9, 2657.0], [99.0, 2667.0], [99.1, 2667.0], [99.2, 2667.0], [99.3, 2667.0], [99.4, 2667.0], [99.5, 2685.0], [99.6, 2685.0], [99.7, 2685.0], [99.8, 2685.0], [99.9, 2685.0]], "isOverall": false, "label": "HTTP Request Lichess main page", "isController": false}, {"data": [[0.0, 677.0], [0.1, 677.0], [0.2, 677.0], [0.3, 677.0], [0.4, 677.0], [0.5, 681.0], [0.6, 681.0], [0.7, 681.0], [0.8, 681.0], [0.9, 681.0], [1.0, 681.0], [1.1, 681.0], [1.2, 681.0], [1.3, 681.0], [1.4, 681.0], [1.5, 684.0], [1.6, 684.0], [1.7, 684.0], [1.8, 684.0], [1.9, 684.0], [2.0, 684.0], [2.1, 684.0], [2.2, 684.0], [2.3, 684.0], [2.4, 684.0], [2.5, 684.0], [2.6, 684.0], [2.7, 684.0], [2.8, 684.0], [2.9, 684.0], [3.0, 685.0], [3.1, 685.0], [3.2, 685.0], [3.3, 685.0], [3.4, 685.0], [3.5, 686.0], [3.6, 686.0], [3.7, 686.0], [3.8, 686.0], [3.9, 686.0], [4.0, 687.0], [4.1, 687.0], [4.2, 687.0], [4.3, 687.0], [4.4, 687.0], [4.5, 688.0], [4.6, 688.0], [4.7, 688.0], [4.8, 688.0], [4.9, 688.0], [5.0, 688.0], [5.1, 688.0], [5.2, 688.0], [5.3, 688.0], [5.4, 688.0], [5.5, 689.0], [5.6, 689.0], [5.7, 689.0], [5.8, 689.0], [5.9, 689.0], [6.0, 689.0], [6.1, 689.0], [6.2, 689.0], [6.3, 689.0], [6.4, 689.0], [6.5, 690.0], [6.6, 690.0], [6.7, 690.0], [6.8, 690.0], [6.9, 690.0], [7.0, 690.0], [7.1, 690.0], [7.2, 690.0], [7.3, 690.0], [7.4, 690.0], [7.5, 690.0], [7.6, 690.0], [7.7, 690.0], [7.8, 690.0], [7.9, 690.0], [8.0, 690.0], [8.1, 690.0], [8.2, 690.0], [8.3, 690.0], [8.4, 690.0], [8.5, 691.0], [8.6, 691.0], [8.7, 691.0], [8.8, 691.0], [8.9, 691.0], [9.0, 691.0], [9.1, 691.0], [9.2, 691.0], [9.3, 691.0], [9.4, 691.0], [9.5, 692.0], [9.6, 692.0], [9.7, 692.0], [9.8, 692.0], [9.9, 692.0], [10.0, 692.0], [10.1, 692.0], [10.2, 692.0], [10.3, 692.0], [10.4, 692.0], [10.5, 692.0], [10.6, 692.0], [10.7, 692.0], [10.8, 692.0], [10.9, 692.0], [11.0, 692.0], [11.1, 692.0], [11.2, 692.0], [11.3, 692.0], [11.4, 692.0], [11.5, 692.0], [11.6, 692.0], [11.7, 692.0], [11.8, 692.0], [11.9, 692.0], [12.0, 692.0], [12.1, 692.0], [12.2, 692.0], [12.3, 692.0], [12.4, 692.0], [12.5, 692.0], [12.6, 692.0], [12.7, 692.0], [12.8, 692.0], [12.9, 692.0], [13.0, 693.0], [13.1, 693.0], [13.2, 693.0], [13.3, 693.0], [13.4, 693.0], [13.5, 693.0], [13.6, 693.0], [13.7, 693.0], [13.8, 693.0], [13.9, 693.0], [14.0, 693.0], [14.1, 693.0], [14.2, 693.0], [14.3, 693.0], [14.4, 693.0], [14.5, 693.0], [14.6, 693.0], [14.7, 693.0], [14.8, 693.0], [14.9, 693.0], [15.0, 694.0], [15.1, 694.0], [15.2, 694.0], [15.3, 694.0], [15.4, 694.0], [15.5, 694.0], [15.6, 694.0], [15.7, 694.0], [15.8, 694.0], [15.9, 694.0], [16.0, 694.0], [16.1, 694.0], [16.2, 694.0], [16.3, 694.0], [16.4, 694.0], [16.5, 694.0], [16.6, 694.0], [16.7, 694.0], [16.8, 694.0], [16.9, 694.0], [17.0, 694.0], [17.1, 694.0], [17.2, 694.0], [17.3, 694.0], [17.4, 694.0], [17.5, 694.0], [17.6, 694.0], [17.7, 694.0], [17.8, 694.0], [17.9, 694.0], [18.0, 695.0], [18.1, 695.0], [18.2, 695.0], [18.3, 695.0], [18.4, 695.0], [18.5, 695.0], [18.6, 695.0], [18.7, 695.0], [18.8, 695.0], [18.9, 695.0], [19.0, 695.0], [19.1, 695.0], [19.2, 695.0], [19.3, 695.0], [19.4, 695.0], [19.5, 695.0], [19.6, 695.0], [19.7, 695.0], [19.8, 695.0], [19.9, 695.0], [20.0, 695.0], [20.1, 695.0], [20.2, 695.0], [20.3, 695.0], [20.4, 695.0], [20.5, 695.0], [20.6, 695.0], [20.7, 695.0], [20.8, 695.0], [20.9, 695.0], [21.0, 695.0], [21.1, 695.0], [21.2, 695.0], [21.3, 695.0], [21.4, 695.0], [21.5, 695.0], [21.6, 695.0], [21.7, 695.0], [21.8, 695.0], [21.9, 695.0], [22.0, 696.0], [22.1, 696.0], [22.2, 696.0], [22.3, 696.0], [22.4, 696.0], [22.5, 696.0], [22.6, 696.0], [22.7, 696.0], [22.8, 696.0], [22.9, 696.0], [23.0, 697.0], [23.1, 697.0], [23.2, 697.0], [23.3, 697.0], [23.4, 697.0], [23.5, 697.0], [23.6, 697.0], [23.7, 697.0], [23.8, 697.0], [23.9, 697.0], [24.0, 698.0], [24.1, 698.0], [24.2, 698.0], [24.3, 698.0], [24.4, 698.0], [24.5, 698.0], [24.6, 698.0], [24.7, 698.0], [24.8, 698.0], [24.9, 698.0], [25.0, 698.0], [25.1, 698.0], [25.2, 698.0], [25.3, 698.0], [25.4, 698.0], [25.5, 698.0], [25.6, 698.0], [25.7, 698.0], [25.8, 698.0], [25.9, 698.0], [26.0, 699.0], [26.1, 699.0], [26.2, 699.0], [26.3, 699.0], [26.4, 699.0], [26.5, 699.0], [26.6, 699.0], [26.7, 699.0], [26.8, 699.0], [26.9, 699.0], [27.0, 700.0], [27.1, 700.0], [27.2, 700.0], [27.3, 700.0], [27.4, 700.0], [27.5, 700.0], [27.6, 700.0], [27.7, 700.0], [27.8, 700.0], [27.9, 700.0], [28.0, 700.0], [28.1, 700.0], [28.2, 700.0], [28.3, 700.0], [28.4, 700.0], [28.5, 700.0], [28.6, 700.0], [28.7, 700.0], [28.8, 700.0], [28.9, 700.0], [29.0, 700.0], [29.1, 700.0], [29.2, 700.0], [29.3, 700.0], [29.4, 700.0], [29.5, 701.0], [29.6, 701.0], [29.7, 701.0], [29.8, 701.0], [29.9, 701.0], [30.0, 701.0], [30.1, 701.0], [30.2, 701.0], [30.3, 701.0], [30.4, 701.0], [30.5, 701.0], [30.6, 701.0], [30.7, 701.0], [30.8, 701.0], [30.9, 701.0], [31.0, 701.0], [31.1, 701.0], [31.2, 701.0], [31.3, 701.0], [31.4, 701.0], [31.5, 702.0], [31.6, 702.0], [31.7, 702.0], [31.8, 702.0], [31.9, 702.0], [32.0, 702.0], [32.1, 702.0], [32.2, 702.0], [32.3, 702.0], [32.4, 702.0], [32.5, 702.0], [32.6, 702.0], [32.7, 702.0], [32.8, 702.0], [32.9, 702.0], [33.0, 702.0], [33.1, 702.0], [33.2, 702.0], [33.3, 702.0], [33.4, 702.0], [33.5, 702.0], [33.6, 702.0], [33.7, 702.0], [33.8, 702.0], [33.9, 702.0], [34.0, 702.0], [34.1, 702.0], [34.2, 702.0], [34.3, 702.0], [34.4, 702.0], [34.5, 703.0], [34.6, 703.0], [34.7, 703.0], [34.8, 703.0], [34.9, 703.0], [35.0, 703.0], [35.1, 703.0], [35.2, 703.0], [35.3, 703.0], [35.4, 703.0], [35.5, 703.0], [35.6, 703.0], [35.7, 703.0], [35.8, 703.0], [35.9, 703.0], [36.0, 704.0], [36.1, 704.0], [36.2, 704.0], [36.3, 704.0], [36.4, 704.0], [36.5, 704.0], [36.6, 704.0], [36.7, 704.0], [36.8, 704.0], [36.9, 704.0], [37.0, 704.0], [37.1, 704.0], [37.2, 704.0], [37.3, 704.0], [37.4, 704.0], [37.5, 704.0], [37.6, 704.0], [37.7, 704.0], [37.8, 704.0], [37.9, 704.0], [38.0, 704.0], [38.1, 704.0], [38.2, 704.0], [38.3, 704.0], [38.4, 704.0], [38.5, 705.0], [38.6, 705.0], [38.7, 705.0], [38.8, 705.0], [38.9, 705.0], [39.0, 705.0], [39.1, 705.0], [39.2, 705.0], [39.3, 705.0], [39.4, 705.0], [39.5, 705.0], [39.6, 705.0], [39.7, 705.0], [39.8, 705.0], [39.9, 705.0], [40.0, 705.0], [40.1, 705.0], [40.2, 705.0], [40.3, 705.0], [40.4, 705.0], [40.5, 705.0], [40.6, 705.0], [40.7, 705.0], [40.8, 705.0], [40.9, 705.0], [41.0, 705.0], [41.1, 705.0], [41.2, 705.0], [41.3, 705.0], [41.4, 705.0], [41.5, 705.0], [41.6, 705.0], [41.7, 705.0], [41.8, 705.0], [41.9, 705.0], [42.0, 706.0], [42.1, 706.0], [42.2, 706.0], [42.3, 706.0], [42.4, 706.0], [42.5, 706.0], [42.6, 706.0], [42.7, 706.0], [42.8, 706.0], [42.9, 706.0], [43.0, 706.0], [43.1, 706.0], [43.2, 706.0], [43.3, 706.0], [43.4, 706.0], [43.5, 707.0], [43.6, 707.0], [43.7, 707.0], [43.8, 707.0], [43.9, 707.0], [44.0, 707.0], [44.1, 707.0], [44.2, 707.0], [44.3, 707.0], [44.4, 707.0], [44.5, 707.0], [44.6, 707.0], [44.7, 707.0], [44.8, 707.0], [44.9, 707.0], [45.0, 707.0], [45.1, 707.0], [45.2, 707.0], [45.3, 707.0], [45.4, 707.0], [45.5, 708.0], [45.6, 708.0], [45.7, 708.0], [45.8, 708.0], [45.9, 708.0], [46.0, 708.0], [46.1, 708.0], [46.2, 708.0], [46.3, 708.0], [46.4, 708.0], [46.5, 708.0], [46.6, 708.0], [46.7, 708.0], [46.8, 708.0], [46.9, 708.0], [47.0, 708.0], [47.1, 708.0], [47.2, 708.0], [47.3, 708.0], [47.4, 708.0], [47.5, 709.0], [47.6, 709.0], [47.7, 709.0], [47.8, 709.0], [47.9, 709.0], [48.0, 709.0], [48.1, 709.0], [48.2, 709.0], [48.3, 709.0], [48.4, 709.0], [48.5, 709.0], [48.6, 709.0], [48.7, 709.0], [48.8, 709.0], [48.9, 709.0], [49.0, 709.0], [49.1, 709.0], [49.2, 709.0], [49.3, 709.0], [49.4, 709.0], [49.5, 709.0], [49.6, 709.0], [49.7, 709.0], [49.8, 709.0], [49.9, 709.0], [50.0, 710.0], [50.1, 710.0], [50.2, 710.0], [50.3, 710.0], [50.4, 710.0], [50.5, 710.0], [50.6, 710.0], [50.7, 710.0], [50.8, 710.0], [50.9, 710.0], [51.0, 710.0], [51.1, 710.0], [51.2, 710.0], [51.3, 710.0], [51.4, 710.0], [51.5, 710.0], [51.6, 710.0], [51.7, 710.0], [51.8, 710.0], [51.9, 710.0], [52.0, 710.0], [52.1, 710.0], [52.2, 710.0], [52.3, 710.0], [52.4, 710.0], [52.5, 710.0], [52.6, 710.0], [52.7, 710.0], [52.8, 710.0], [52.9, 710.0], [53.0, 711.0], [53.1, 711.0], [53.2, 711.0], [53.3, 711.0], [53.4, 711.0], [53.5, 711.0], [53.6, 711.0], [53.7, 711.0], [53.8, 711.0], [53.9, 711.0], [54.0, 711.0], [54.1, 711.0], [54.2, 711.0], [54.3, 711.0], [54.4, 711.0], [54.5, 711.0], [54.6, 711.0], [54.7, 711.0], [54.8, 711.0], [54.9, 711.0], [55.0, 711.0], [55.1, 711.0], [55.2, 711.0], [55.3, 711.0], [55.4, 711.0], [55.5, 711.0], [55.6, 711.0], [55.7, 711.0], [55.8, 711.0], [55.9, 711.0], [56.0, 712.0], [56.1, 712.0], [56.2, 712.0], [56.3, 712.0], [56.4, 712.0], [56.5, 712.0], [56.6, 712.0], [56.7, 712.0], [56.8, 712.0], [56.9, 712.0], [57.0, 713.0], [57.1, 713.0], [57.2, 713.0], [57.3, 713.0], [57.4, 713.0], [57.5, 713.0], [57.6, 713.0], [57.7, 713.0], [57.8, 713.0], [57.9, 713.0], [58.0, 713.0], [58.1, 713.0], [58.2, 713.0], [58.3, 713.0], [58.4, 713.0], [58.5, 714.0], [58.6, 714.0], [58.7, 714.0], [58.8, 714.0], [58.9, 714.0], [59.0, 714.0], [59.1, 714.0], [59.2, 714.0], [59.3, 714.0], [59.4, 714.0], [59.5, 714.0], [59.6, 714.0], [59.7, 714.0], [59.8, 714.0], [59.9, 714.0], [60.0, 715.0], [60.1, 715.0], [60.2, 715.0], [60.3, 715.0], [60.4, 715.0], [60.5, 715.0], [60.6, 715.0], [60.7, 715.0], [60.8, 715.0], [60.9, 715.0], [61.0, 716.0], [61.1, 716.0], [61.2, 716.0], [61.3, 716.0], [61.4, 716.0], [61.5, 716.0], [61.6, 716.0], [61.7, 716.0], [61.8, 716.0], [61.9, 716.0], [62.0, 718.0], [62.1, 718.0], [62.2, 718.0], [62.3, 718.0], [62.4, 718.0], [62.5, 719.0], [62.6, 719.0], [62.7, 719.0], [62.8, 719.0], [62.9, 719.0], [63.0, 719.0], [63.1, 719.0], [63.2, 719.0], [63.3, 719.0], [63.4, 719.0], [63.5, 719.0], [63.6, 719.0], [63.7, 719.0], [63.8, 719.0], [63.9, 719.0], [64.0, 720.0], [64.1, 720.0], [64.2, 720.0], [64.3, 720.0], [64.4, 720.0], [64.5, 720.0], [64.6, 720.0], [64.7, 720.0], [64.8, 720.0], [64.9, 720.0], [65.0, 720.0], [65.1, 720.0], [65.2, 720.0], [65.3, 720.0], [65.4, 720.0], [65.5, 720.0], [65.6, 720.0], [65.7, 720.0], [65.8, 720.0], [65.9, 720.0], [66.0, 720.0], [66.1, 720.0], [66.2, 720.0], [66.3, 720.0], [66.4, 720.0], [66.5, 720.0], [66.6, 720.0], [66.7, 720.0], [66.8, 720.0], [66.9, 720.0], [67.0, 721.0], [67.1, 721.0], [67.2, 721.0], [67.3, 721.0], [67.4, 721.0], [67.5, 721.0], [67.6, 721.0], [67.7, 721.0], [67.8, 721.0], [67.9, 721.0], [68.0, 722.0], [68.1, 722.0], [68.2, 722.0], [68.3, 722.0], [68.4, 722.0], [68.5, 723.0], [68.6, 723.0], [68.7, 723.0], [68.8, 723.0], [68.9, 723.0], [69.0, 725.0], [69.1, 725.0], [69.2, 725.0], [69.3, 725.0], [69.4, 725.0], [69.5, 725.0], [69.6, 725.0], [69.7, 725.0], [69.8, 725.0], [69.9, 725.0], [70.0, 727.0], [70.1, 727.0], [70.2, 727.0], [70.3, 727.0], [70.4, 727.0], [70.5, 728.0], [70.6, 728.0], [70.7, 728.0], [70.8, 728.0], [70.9, 728.0], [71.0, 729.0], [71.1, 729.0], [71.2, 729.0], [71.3, 729.0], [71.4, 729.0], [71.5, 734.0], [71.6, 734.0], [71.7, 734.0], [71.8, 734.0], [71.9, 734.0], [72.0, 736.0], [72.1, 736.0], [72.2, 736.0], [72.3, 736.0], [72.4, 736.0], [72.5, 736.0], [72.6, 736.0], [72.7, 736.0], [72.8, 736.0], [72.9, 736.0], [73.0, 737.0], [73.1, 737.0], [73.2, 737.0], [73.3, 737.0], [73.4, 737.0], [73.5, 738.0], [73.6, 738.0], [73.7, 738.0], [73.8, 738.0], [73.9, 738.0], [74.0, 738.0], [74.1, 738.0], [74.2, 738.0], [74.3, 738.0], [74.4, 738.0], [74.5, 739.0], [74.6, 739.0], [74.7, 739.0], [74.8, 739.0], [74.9, 739.0], [75.0, 739.0], [75.1, 739.0], [75.2, 739.0], [75.3, 739.0], [75.4, 739.0], [75.5, 742.0], [75.6, 742.0], [75.7, 742.0], [75.8, 742.0], [75.9, 742.0], [76.0, 743.0], [76.1, 743.0], [76.2, 743.0], [76.3, 743.0], [76.4, 743.0], [76.5, 743.0], [76.6, 743.0], [76.7, 743.0], [76.8, 743.0], [76.9, 743.0], [77.0, 745.0], [77.1, 745.0], [77.2, 745.0], [77.3, 745.0], [77.4, 745.0], [77.5, 749.0], [77.6, 749.0], [77.7, 749.0], [77.8, 749.0], [77.9, 749.0], [78.0, 751.0], [78.1, 751.0], [78.2, 751.0], [78.3, 751.0], [78.4, 751.0], [78.5, 751.0], [78.6, 751.0], [78.7, 751.0], [78.8, 751.0], [78.9, 751.0], [79.0, 751.0], [79.1, 751.0], [79.2, 751.0], [79.3, 751.0], [79.4, 751.0], [79.5, 752.0], [79.6, 752.0], [79.7, 752.0], [79.8, 752.0], [79.9, 752.0], [80.0, 753.0], [80.1, 753.0], [80.2, 753.0], [80.3, 753.0], [80.4, 753.0], [80.5, 753.0], [80.6, 753.0], [80.7, 753.0], [80.8, 753.0], [80.9, 753.0], [81.0, 754.0], [81.1, 754.0], [81.2, 754.0], [81.3, 754.0], [81.4, 754.0], [81.5, 755.0], [81.6, 755.0], [81.7, 755.0], [81.8, 755.0], [81.9, 755.0], [82.0, 755.0], [82.1, 755.0], [82.2, 755.0], [82.3, 755.0], [82.4, 755.0], [82.5, 756.0], [82.6, 756.0], [82.7, 756.0], [82.8, 756.0], [82.9, 756.0], [83.0, 756.0], [83.1, 756.0], [83.2, 756.0], [83.3, 756.0], [83.4, 756.0], [83.5, 756.0], [83.6, 756.0], [83.7, 756.0], [83.8, 756.0], [83.9, 756.0], [84.0, 757.0], [84.1, 757.0], [84.2, 757.0], [84.3, 757.0], [84.4, 757.0], [84.5, 757.0], [84.6, 757.0], [84.7, 757.0], [84.8, 757.0], [84.9, 757.0], [85.0, 759.0], [85.1, 759.0], [85.2, 759.0], [85.3, 759.0], [85.4, 759.0], [85.5, 759.0], [85.6, 759.0], [85.7, 759.0], [85.8, 759.0], [85.9, 759.0], [86.0, 760.0], [86.1, 760.0], [86.2, 760.0], [86.3, 760.0], [86.4, 760.0], [86.5, 760.0], [86.6, 760.0], [86.7, 760.0], [86.8, 760.0], [86.9, 760.0], [87.0, 762.0], [87.1, 762.0], [87.2, 762.0], [87.3, 762.0], [87.4, 762.0], [87.5, 763.0], [87.6, 763.0], [87.7, 763.0], [87.8, 763.0], [87.9, 763.0], [88.0, 767.0], [88.1, 767.0], [88.2, 767.0], [88.3, 767.0], [88.4, 767.0], [88.5, 767.0], [88.6, 767.0], [88.7, 767.0], [88.8, 767.0], [88.9, 767.0], [89.0, 773.0], [89.1, 773.0], [89.2, 773.0], [89.3, 773.0], [89.4, 773.0], [89.5, 773.0], [89.6, 773.0], [89.7, 773.0], [89.8, 773.0], [89.9, 773.0], [90.0, 775.0], [90.1, 775.0], [90.2, 775.0], [90.3, 775.0], [90.4, 775.0], [90.5, 775.0], [90.6, 775.0], [90.7, 775.0], [90.8, 775.0], [90.9, 775.0], [91.0, 776.0], [91.1, 776.0], [91.2, 776.0], [91.3, 776.0], [91.4, 776.0], [91.5, 777.0], [91.6, 777.0], [91.7, 777.0], [91.8, 777.0], [91.9, 777.0], [92.0, 779.0], [92.1, 779.0], [92.2, 779.0], [92.3, 779.0], [92.4, 779.0], [92.5, 781.0], [92.6, 781.0], [92.7, 781.0], [92.8, 781.0], [92.9, 781.0], [93.0, 782.0], [93.1, 782.0], [93.2, 782.0], [93.3, 782.0], [93.4, 782.0], [93.5, 783.0], [93.6, 783.0], [93.7, 783.0], [93.8, 783.0], [93.9, 783.0], [94.0, 783.0], [94.1, 783.0], [94.2, 783.0], [94.3, 783.0], [94.4, 783.0], [94.5, 788.0], [94.6, 788.0], [94.7, 788.0], [94.8, 788.0], [94.9, 788.0], [95.0, 791.0], [95.1, 791.0], [95.2, 791.0], [95.3, 791.0], [95.4, 791.0], [95.5, 793.0], [95.6, 793.0], [95.7, 793.0], [95.8, 793.0], [95.9, 793.0], [96.0, 797.0], [96.1, 797.0], [96.2, 797.0], [96.3, 797.0], [96.4, 797.0], [96.5, 798.0], [96.6, 798.0], [96.7, 798.0], [96.8, 798.0], [96.9, 798.0], [97.0, 808.0], [97.1, 808.0], [97.2, 808.0], [97.3, 808.0], [97.4, 808.0], [97.5, 1242.0], [97.6, 1242.0], [97.7, 1242.0], [97.8, 1242.0], [97.9, 1242.0], [98.0, 1250.0], [98.1, 1250.0], [98.2, 1250.0], [98.3, 1250.0], [98.4, 1250.0], [98.5, 1685.0], [98.6, 1685.0], [98.7, 1685.0], [98.8, 1685.0], [98.9, 1685.0], [99.0, 1743.0], [99.1, 1743.0], [99.2, 1743.0], [99.3, 1743.0], [99.4, 1743.0], [99.5, 1959.0], [99.6, 1959.0], [99.7, 1959.0], [99.8, 1959.0], [99.9, 1959.0]], "isOverall": false, "label": "HTTP Request Lichess main page-0", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 140.0, "series": [{"data": [[600.0, 44.0], [1200.0, 4.0], [700.0, 114.0], [800.0, 1.0], [900.0, 33.0], [1900.0, 2.0], [1000.0, 2.0]], "isOverall": false, "label": "HTTP Request Lichess main page-1", "isController": false}, {"data": [[2400.0, 2.0], [1300.0, 29.0], [2600.0, 3.0], [1400.0, 117.0], [1500.0, 8.0], [1600.0, 29.0], [1700.0, 5.0], [1800.0, 1.0], [1900.0, 5.0], [2000.0, 1.0]], "isOverall": false, "label": "HTTP Request Lichess main page", "isController": false}, {"data": [[600.0, 54.0], [1200.0, 2.0], [700.0, 140.0], [800.0, 1.0], [1600.0, 1.0], [1700.0, 1.0], [1900.0, 1.0]], "isOverall": false, "label": "HTTP Request Lichess main page-0", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 38.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 330.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 232.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 38.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 330.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 21.67741935483871, "minX": 1.66861686E12, "maxY": 31.442696629213476, "series": [{"data": [[1.66861692E12, 21.67741935483871], [1.66861686E12, 31.442696629213476]], "isOverall": false, "label": "Load test Lichess main page", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66861692E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 686.0, "minX": 2.0, "maxY": 1836.0, "series": [{"data": [[33.0, 841.8800000000001], [32.0, 746.0714285714284], [2.0, 825.0], [35.0, 1117.2], [34.0, 874.5000000000001], [3.0, 697.0], [4.0, 740.0], [5.0, 688.0], [6.0, 709.0], [7.0, 695.0], [8.0, 948.0], [9.0, 698.0], [10.0, 701.0], [11.0, 713.0], [12.0, 702.0], [13.0, 700.0], [14.0, 686.0], [15.0, 739.0], [16.0, 700.0], [17.0, 708.0], [18.0, 934.0], [21.0, 720.3333333333334], [22.0, 709.0], [23.0, 704.0], [24.0, 719.0], [27.0, 702.6666666666666], [28.0, 733.0], [29.0, 730.909090909091], [30.0, 735.3030303030301], [31.0, 801.9268292682925]], "isOverall": false, "label": "HTTP Request Lichess main page-1", "isController": false}, {"data": [[28.919999999999998, 780.9049999999997]], "isOverall": false, "label": "HTTP Request Lichess main page-1-Aggregated", "isController": false}, {"data": [[33.0, 1582.6800000000003], [32.0, 1546.857142857143], [2.0, 1588.5], [35.0, 1836.0], [34.0, 1605.3333333333333], [3.0, 1405.0], [4.0, 1445.0], [5.0, 1395.0], [6.0, 1436.0], [7.0, 1409.0], [8.0, 1668.0], [9.0, 1394.0], [10.0, 1415.0], [11.0, 1441.0], [12.0, 1403.0], [13.0, 1402.0], [14.0, 1406.0], [15.0, 1447.0], [16.0, 1415.0], [17.0, 1463.0], [18.0, 1660.0], [21.0, 1424.3333333333333], [22.0, 1482.0], [23.0, 1414.0], [24.0, 1425.0], [27.0, 1444.3333333333333], [28.0, 1439.5714285714284], [29.0, 1441.2272727272727], [30.0, 1455.0], [31.0, 1558.3658536585365]], "isOverall": false, "label": "HTTP Request Lichess main page", "isController": false}, {"data": [[28.919999999999998, 1521.614999999999]], "isOverall": false, "label": "HTTP Request Lichess main page-Aggregated", "isController": false}, {"data": [[33.0, 740.4399999999999], [32.0, 800.2500000000001], [2.0, 763.0], [35.0, 718.6], [34.0, 730.5], [3.0, 707.0], [4.0, 705.0], [5.0, 707.0], [6.0, 727.0], [7.0, 713.0], [8.0, 720.0], [9.0, 695.0], [10.0, 713.0], [11.0, 728.0], [12.0, 700.0], [13.0, 701.0], [14.0, 720.0], [15.0, 708.0], [16.0, 714.0], [17.0, 755.0], [18.0, 725.0], [21.0, 703.6666666666666], [22.0, 773.0], [23.0, 709.0], [24.0, 706.0], [27.0, 741.3333333333334], [28.0, 706.0], [29.0, 709.8181818181815], [30.0, 719.272727272727], [31.0, 756.0731707317074]], "isOverall": false, "label": "HTTP Request Lichess main page-0", "isController": false}, {"data": [[28.919999999999998, 740.285]], "isOverall": false, "label": "HTTP Request Lichess main page-0-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 35.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 411.01666666666665, "minX": 1.66861686E12, "maxY": 39297.833333333336, "series": [{"data": [[1.66861692E12, 11369.566666666668], [1.66861686E12, 39297.833333333336]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66861692E12, 411.01666666666665], [1.66861686E12, 1148.9833333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66861692E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 722.5813953488373, "minX": 1.66861686E12, "maxY": 1544.4236111111109, "series": [{"data": [[1.66861692E12, 742.9107142857142], [1.66861686E12, 795.6805555555554]], "isOverall": false, "label": "HTTP Request Lichess main page-1", "isController": false}, {"data": [[1.66861692E12, 1462.964285714286], [1.66861686E12, 1544.4236111111109]], "isOverall": false, "label": "HTTP Request Lichess main page", "isController": false}, {"data": [[1.66861692E12, 722.5813953488373], [1.66861686E12, 745.1337579617833]], "isOverall": false, "label": "HTTP Request Lichess main page-0", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66861692E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 719.5892857142859, "minX": 1.66861686E12, "maxY": 795.3749999999998, "series": [{"data": [[1.66861692E12, 742.1428571428572], [1.66861686E12, 795.3749999999998]], "isOverall": false, "label": "HTTP Request Lichess main page-1", "isController": false}, {"data": [[1.66861692E12, 719.5892857142859], [1.66861686E12, 748.3055555555553]], "isOverall": false, "label": "HTTP Request Lichess main page", "isController": false}, {"data": [[1.66861692E12, 722.5813953488373], [1.66861686E12, 745.1082802547768]], "isOverall": false, "label": "HTTP Request Lichess main page-0", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66861692E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 479.0535714285715, "minX": 1.66861686E12, "maxY": 498.7847222222223, "series": [{"data": [[1.66861692E12, 479.0535714285715], [1.66861686E12, 486.93055555555543]], "isOverall": false, "label": "HTTP Request Lichess main page-1", "isController": false}, {"data": [[1.66861692E12, 481.3571428571428], [1.66861686E12, 498.7847222222223]], "isOverall": false, "label": "HTTP Request Lichess main page", "isController": false}, {"data": [[1.66861692E12, 484.23255813953494], [1.66861686E12, 496.55414012738856]], "isOverall": false, "label": "HTTP Request Lichess main page-0", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66861692E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 677.0, "minX": 1.66861686E12, "maxY": 1959.0, "series": [{"data": [[1.66861692E12, 1712.0], [1.66861686E12, 1959.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66861692E12, 1653.6], [1.66861686E12, 1645.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66861692E12, 1712.0], [1.66861686E12, 1799.899999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66861692E12, 1675.3], [1.66861686E12, 1687.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66861692E12, 688.0], [1.66861686E12, 677.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66861692E12, 721.0], [1.66861686E12, 721.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66861692E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 709.5, "minX": 19.0, "maxY": 1385.0, "series": [{"data": [[66.0, 711.0], [64.0, 709.5], [65.0, 720.0], [70.0, 920.0], [19.0, 716.0], [48.0, 712.0], [58.0, 719.5], [59.0, 711.0], [62.0, 739.0], [31.0, 948.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[66.0, 1384.0], [64.0, 1085.5], [65.0, 1079.0], [70.0, 1074.0], [48.0, 1102.0], [58.0, 1332.5], [59.0, 1091.5], [62.0, 1385.0], [31.0, 1067.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 70.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 705.5, "minX": 19.0, "maxY": 767.0, "series": [{"data": [[66.0, 710.0], [64.0, 709.5], [65.0, 720.0], [70.0, 723.0], [19.0, 716.0], [48.0, 709.5], [58.0, 713.0], [59.0, 711.0], [62.0, 728.0], [31.0, 767.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[66.0, 715.0], [64.0, 709.0], [65.0, 708.5], [70.0, 712.5], [48.0, 706.0], [58.0, 709.0], [59.0, 705.5], [62.0, 708.5], [31.0, 706.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 70.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.6166666666666667, "minX": 1.66861686E12, "maxY": 8.383333333333333, "series": [{"data": [[1.66861692E12, 1.6166666666666667], [1.66861686E12, 8.383333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66861692E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.66861686E12, "maxY": 3.8666666666666667, "series": [{"data": [[1.66861692E12, 0.23333333333333334], [1.66861686E12, 0.9333333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.66861692E12, 0.7166666666666667], [1.66861686E12, 2.6166666666666667]], "isOverall": false, "label": "301", "isController": false}, {"data": [[1.66861692E12, 1.6333333333333333], [1.66861686E12, 3.8666666666666667]], "isOverall": false, "label": "429", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66861692E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.66861686E12, "maxY": 2.6166666666666667, "series": [{"data": [[1.66861692E12, 0.11666666666666667], [1.66861686E12, 0.4666666666666667]], "isOverall": false, "label": "HTTP Request Lichess main page-1-success", "isController": false}, {"data": [[1.66861692E12, 0.8166666666666667], [1.66861686E12, 1.9333333333333333]], "isOverall": false, "label": "HTTP Request Lichess main page-1-failure", "isController": false}, {"data": [[1.66861692E12, 0.11666666666666667], [1.66861686E12, 0.4666666666666667]], "isOverall": false, "label": "HTTP Request Lichess main page-success", "isController": false}, {"data": [[1.66861692E12, 0.8166666666666667], [1.66861686E12, 1.9333333333333333]], "isOverall": false, "label": "HTTP Request Lichess main page-failure", "isController": false}, {"data": [[1.66861692E12, 0.7166666666666667], [1.66861686E12, 2.6166666666666667]], "isOverall": false, "label": "HTTP Request Lichess main page-0-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66861692E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.95, "minX": 1.66861686E12, "maxY": 3.8666666666666667, "series": [{"data": [[1.66861692E12, 0.95], [1.66861686E12, 3.55]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.66861692E12, 1.6333333333333333], [1.66861686E12, 3.8666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66861692E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

